AWSTemplateFormatVersion: 2010-09-09
Description: >-
  EKS cluster (dedicated VPC: true, dedicated IAM: true) [created and managed by
  eksctl]
Resources:
  ClusterSharedNodeSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Communication between all nodes in the cluster
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/ClusterSharedNodeSecurityGroup'
      VpcId: !Ref VPC
  ControlPlane:
    Type: 'AWS::EKS::Cluster'
    Properties:
      Name: eksworkshop-eksctl
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds:
          - !Ref SubnetPrivateUSWEST2C
          - !Ref SubnetPrivateUSWEST2D
          - !Ref SubnetPrivateUSWEST2B
          - !Ref SubnetPublicUSWEST2C
          - !Ref SubnetPublicUSWEST2D
          - !Ref SubnetPublicUSWEST2B
      RoleArn: !GetAtt ServiceRole.Arn
      Version: '1.13'
  ControlPlaneSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Communication between the control plane and worker nodegroups
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/ControlPlaneSecurityGroup'
      VpcId: !Ref VPC
  IngressInterNodeGroupSG:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Allow nodes to communicate with each other (all ports)
      FromPort: 0
      GroupId: !Ref ClusterSharedNodeSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref ClusterSharedNodeSecurityGroup
      ToPort: 65535
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/InternetGateway'
  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NATIP.AllocationId
      SubnetId: !Ref SubnetPublicUSWEST2C
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/NATGateway'
  NATIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  NATPrivateSubnetRouteUSWEST2B:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTableUSWEST2B
  NATPrivateSubnetRouteUSWEST2C:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTableUSWEST2C
  NATPrivateSubnetRouteUSWEST2D:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTableUSWEST2D
  PolicyCloudWatchMetrics:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'cloudwatch:PutMetricData'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: !Sub '${AWS::StackName}-PolicyCloudWatchMetrics'
      Roles:
        - !Ref ServiceRole
  PolicyNLB:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'elasticloadbalancing:*'
              - 'ec2:CreateSecurityGroup'
              - 'ec2:Describe*'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: !Sub '${AWS::StackName}-PolicyNLB'
      Roles:
        - !Ref ServiceRole
  PrivateRouteTableUSWEST2B:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/PrivateRouteTableUSWEST2B'
      VpcId: !Ref VPC
  PrivateRouteTableUSWEST2C:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/PrivateRouteTableUSWEST2C'
      VpcId: !Ref VPC
  PrivateRouteTableUSWEST2D:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/PrivateRouteTableUSWEST2D'
      VpcId: !Ref VPC
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/PublicRouteTable'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 9a8f357f-75d3-4183-983e-bd307f6d3117
  PublicSubnetRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRouteTable
    Metadata:
      'AWS::CloudFormation::Designer':
        id: ebc4e8d8-ebcb-4d45-b6b4-9701c078d3d5
  RouteTableAssociationPrivateUSWEST2B:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTableUSWEST2B
      SubnetId: !Ref SubnetPrivateUSWEST2B
  RouteTableAssociationPrivateUSWEST2C:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTableUSWEST2C
      SubnetId: !Ref SubnetPrivateUSWEST2C
  RouteTableAssociationPrivateUSWEST2D:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTableUSWEST2D
      SubnetId: !Ref SubnetPrivateUSWEST2D
  RouteTableAssociationPublicUSWEST2B:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicUSWEST2B
  RouteTableAssociationPublicUSWEST2C:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicUSWEST2C
  RouteTableAssociationPublicUSWEST2D:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicUSWEST2D
  ServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEKSServicePolicy'
        - 'arn:aws:iam::aws:policy/AmazonEKSClusterPolicy'
  SubnetPrivateUSWEST2B:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-west-2b
      CidrBlock: 192.168.160.0/19
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPrivateUSWEST2B'
      VpcId: !Ref VPC
  SubnetPrivateUSWEST2C:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-west-2c
      CidrBlock: 192.168.96.0/19
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPrivateUSWEST2C'
      VpcId: !Ref VPC
  SubnetPrivateUSWEST2D:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-west-2d
      CidrBlock: 192.168.128.0/19
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPrivateUSWEST2D'
      VpcId: !Ref VPC
  SubnetPublicUSWEST2B:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-west-2b
      CidrBlock: 192.168.64.0/19
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPublicUSWEST2B'
      VpcId: !Ref VPC
  SubnetPublicUSWEST2C:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-west-2c
      CidrBlock: 192.168.0.0/19
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPublicUSWEST2C'
      VpcId: !Ref VPC
  SubnetPublicUSWEST2D:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-west-2d
      CidrBlock: 192.168.32.0/19
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPublicUSWEST2D'
      VpcId: !Ref VPC
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/VPC'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
Outputs:
  ARN:
    Export:
      Name: !Sub '${AWS::StackName}::ARN'
    Value: !GetAtt ControlPlane.Arn
  CertificateAuthorityData:
    Value: !GetAtt ControlPlane.CertificateAuthorityData
  ClusterStackName:
    Value: !Ref 'AWS::StackName'
  Endpoint:
    Export:
      Name: !Sub '${AWS::StackName}::Endpoint'
    Value: !GetAtt ControlPlane.Endpoint
  FeatureNATMode:
    Value: Single
  SecurityGroup:
    Export:
      Name: !Sub '${AWS::StackName}::SecurityGroup'
    Value: !Ref ControlPlaneSecurityGroup
  ServiceRoleARN:
    Export:
      Name: !Sub '${AWS::StackName}::ServiceRoleARN'
    Value: !GetAtt ServiceRole.Arn
  SharedNodeSecurityGroup:
    Export:
      Name: !Sub '${AWS::StackName}::SharedNodeSecurityGroup'
    Value: !Ref ClusterSharedNodeSecurityGroup
  SubnetsPrivate:
    Export:
      Name: !Sub '${AWS::StackName}::SubnetsPrivate'
    Value: !Join
      - ','
      - - !Ref SubnetPrivateUSWEST2C
        - !Ref SubnetPrivateUSWEST2D
        - !Ref SubnetPrivateUSWEST2B
  SubnetsPublic:
    Export:
      Name: !Sub '${AWS::StackName}::SubnetsPublic'
    Value: !Join
      - ','
      - - !Ref SubnetPublicUSWEST2C
        - !Ref SubnetPublicUSWEST2D
        - !Ref SubnetPublicUSWEST2B
  VPC:
    Export:
      Name: !Sub '${AWS::StackName}::VPC'
    Value: !Ref VPC
Metadata:
  'AWS::CloudFormation::Designer':
    9a8f357f-75d3-4183-983e-bd307f6d3117:
      size:
        width: 240
        height: 240
      position:
        x: 270
        'y': 460
      z: 2
      parent: f7020f8f-576a-44a5-b2e8-fd755d350abc
      embeds:
        - ebc4e8d8-ebcb-4d45-b6b4-9701c078d3d5
      iscontainedinside:
        - f7020f8f-576a-44a5-b2e8-fd755d350abc
    ebc4e8d8-ebcb-4d45-b6b4-9701c078d3d5:
      size:
        width: 60
        height: 60
      position:
        x: 300
        'y': 520
      z: 3
      parent: 9a8f357f-75d3-4183-983e-bd307f6d3117
      embeds: []
      isassociatedwith:
        - 7c941c05-caae-43c3-9714-afe32fa95081
      iscontainedinside:
        - 9a8f357f-75d3-4183-983e-bd307f6d3117
